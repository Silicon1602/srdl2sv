---
sense_list_rst: |-
    always_ff @(posedge {clk_name} or {rst_edge} {rst_name})
sense_list_no_rst: |-
    always_ff @(posedge {clk_name})
rst_field_assign: |-
    if ({rst_negl}{rst_name})
    begin
    {path}_q{genvars} <= {rst_value};
    end
    else
sw_access_field: |-
    if ({path_wo_field}_sw_wr{genvars})
    begin
sw_access_field_swwe: |-
    if ({path_wo_field}_sw_wr{genvars} && {swwe}) // swwe property
    begin
sw_access_field_swwel: |-
    if ({path_wo_field}_sw_wr{genvars} && !{swwel}) // swwel property
    begin
sw_access_byte: |-
    if (byte_enable[{i}])
    begin
    {path}_q{genvars}[{msb_field}-:{field_w}] <= sw_wr_bus[{msb_bus}-:{bus_w}];
    end
 
hw_access_we_wel: |-
    if ({negl}{path}_hw_wr{genvars})
hw_access_no_we_wel: |-
    // we or wel property not set
hw_access_field: |-
    begin
    {path}_q{genvars} <= {path}_in{genvars};
    end
end_field_ff: |-
    end // of {path}'s always_ff
OnWriteType.woset: |-
    if (byte_enable[{i}]) // woset property
    begin
    {path}_q{genvars}[{msb_field}-:{field_w}] <= {path}_q{genvars}[{msb_field}-:{field_w}] | sw_wr_bus[{msb_bus}-:{bus_w}];
    end
OnWriteType.woclr: |-
    if (byte_enable[{i}]) // woclr property
    begin
    {path}_q{genvars}[{msb_field}-:{field_w}] <= {path}_q{genvars}[{msb_field}-:{field_w}] & ~sw_wr_bus[{msb_bus}-:{bus_w}];
    end
OnWriteType.wot: |-
    if (byte_enable[{i}]) // wot property
    begin
    {path}_q{genvars}[{msb_field}-:{field_w}] <= {path}_q{genvars}[{msb_field}-:{field_w}] ^ sw_wr_bus[{msb_bus}-:{bus_w}];
    end
OnWriteType.wzs: |-
    if (byte_enable[{i}]) // wzs property
    begin
    {path}_q{genvars}[{msb_field}-:{field_w}] <= {path}_q{genvars}[{msb_field}-:{field_w}] & sw_wr_bus[{msb_bus}-:{bus_w}];
    end
OnWriteType.wzt: |-
    if (byte_enable[{i}]) // wzt property
    begin
    {path}_q{genvars}[{msb_field}-:{field_w}] <= {path}_q{genvars}[{msb_field}-:{field_w}] ~^ sw_wr_bus[{msb_bus}-:{bus_w}];
    end
OnWriteType.wclr: |-
    {path}_q{genvars} <= {{width{{1'b0}}}};
OnWriteType.wset: |-
    {path}_q{genvars} <= {{width{{1'b1}}}};
OnReadType.rclr: |-
    if ({path_wo_field}_sw_rd{genvars}) // rclr property
    begin
    {path}_q{genvars} <= {{width{{1'b0}}}};
    end
OnReadType.rset: |-
    if ({path_wo_field}_sw_rd{genvars}) // rset property
    begin
    {path}_q{genvars} <= {{width{{1'b1}}}};
    end

field_comment: |-

    //-----------------FIELD SUMMARY-----------------
    // name       : {name} ({path_wo_field}[{msb}:{lsb}])
    // access     : hw = {hw_access} {hw_precedence} 
    //              sw = {sw_access} {sw_precedence}
    // reset      : {rst_active} / {rst_type}
    // flags      : {misc_flags}
    //-----------------------------------------------
combo_operation_comment: |-

    // Combinational logic for {path}
assign_combo_operation: |-
    assign {path}_{op_name}{genvars} = {op_verilog}{path}_q{genvars}
singlepulse: |-
    begin
    {path}{genvars} <= 0;
    end
out_port_assign: |-

    // Connect register to hardware output port
    assign {path}_r{genvars} <= {path}_q{genvars};

